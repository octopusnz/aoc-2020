name: Build C Project
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  headergrab:
    if: ${{ github.event_name == 'push' && github.repository_owner == 'octopusnz' }}
    permissions:
      contents: write
      pull-requests: write
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
    env:
      # set to "true" to enable committing files and creating a PR
      COMMIT_HEADERS: "false"
      # optional override for base branch
      BASE_BRANCH: ${{ github.event.repository.default_branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup MSBuild (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Detect and stage SDK files
        if: runner.os == 'Windows'
        env:
          GH_TOKEN: ${{ github.token }}
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Set-StrictMode -Version Latest

          $targetFiles = @(
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\SDK\ScopeCppSDK\vc15\SDK\include\ucrt\io.h",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\SDK\ScopeCppSDK\vc15\SDK\include\ucrt\corecrt_io.h",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\SDK\ScopeCppSDK\vc15\SDK\include\ucrt\corecrt_share.h",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\SDK\ScopeCppSDK\vc15\SDK\include\ucrt\corecrt_wio.h"
          )

          $repoDest = Join-Path $env:GITHUB_WORKSPACE 'docs'
          if (-not (Test-Path $repoDest)) { New-Item -ItemType Directory -Path $repoDest -Force | Out-Null }

          $changedFiles = @{}
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          $branchName = "io-sync-$timestamp"
          $baseBranch = $env:BASE_BRANCH

          foreach ($src in $targetFiles) {
            $fileName = Split-Path $src -Leaf
            $dest = Join-Path $repoDest $fileName

            if (-not (Test-Path $src)) {
              Write-Host "Source not found, skipping: $src"
              continue
            }

            $needsCopy = $false
            if (-not (Test-Path $dest)) {
              $needsCopy = $true
            } else {
              $srcHash = (Get-FileHash $src).Hash
              $dstHash = (Get-FileHash $dest).Hash
              if ($srcHash -ne $dstHash) { $needsCopy = $true }
            }

            if ($needsCopy) {
              $changedFiles[$fileName] = @{ Src = $src; Dest = $dest }
            }
          }

          if ($changedFiles.Count -eq 0) {
            Write-Host 'No file changes detected. Skipping PR/artifact.'
            exit 0
          }

          $prList = gh pr list --state open --json number | ConvertFrom-Json
          if (-not $prList) { $prList = @() }
          $blockedSet = New-Object System.Collections.Generic.HashSet[string]

          foreach ($pr in $prList) {
            try {
              $prData = gh pr view $pr.number --json files | ConvertFrom-Json
              $filePaths = @()
              if ($prData -and $prData.files) {
                $filePaths = @($prData.files | ForEach-Object { $_.path })
              }
              if (-not $filePaths -or $filePaths.Count -eq 0) { continue }
              foreach ($path in $filePaths) {
                $base = Split-Path $path -Leaf
                $normalized = $base.ToLower().Trim()
                [void]$blockedSet.Add($normalized)
              }
            } catch {
              Write-Host "Warning: Unable to get files for PR #$($pr.number): $($_.Exception.Message)"
              continue
            }
          }

          $includedFiles = $changedFiles.Keys | Where-Object { -not $blockedSet.Contains($_.ToLower().Trim()) }

          Write-Host ("Changed files: {0}" -f ($changedFiles.Keys -join ', '))
          Write-Host ("Blocked files: {0}" -f ([string]::Join(', ', $blockedSet)))
          Write-Host ("Files to stage: {0}" -f ($includedFiles -join ', '))

          if ($includedFiles.Count -eq 0) {
            Write-Host 'All changed files are already covered in open PRs. No new PR created.'
            exit 0
          }

          # Copy included files into docs/ for artifact or commit
          foreach ($file in $includedFiles) {
            $srcPath = $changedFiles[$file].Src
            $dstPath = $changedFiles[$file].Dest
            $dstDir  = Split-Path $dstPath -Parent
            if (-not (Test-Path $dstDir)) { New-Item -ItemType Directory -Path $dstDir -Force | Out-Null }
            Copy-Item -Path $srcPath -Destination $dstPath -Force
          }

          # If COMMIT_HEADERS == "true", create branch, commit and open PR; otherwise leave files for artifact upload
          $commitMode = $env:COMMIT_HEADERS -eq 'true'
          if ($commitMode) {
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git fetch origin --no-tags
            git checkout -B $branchName origin/$baseBranch

            foreach ($file in $includedFiles) {
              git add (Join-Path 'docs' $file)
            }

            $commitMsg = "Header sync: $($includedFiles -join ', ')"
            git commit -m $commitMsg
            git push -u origin $branchName

            $includedList = ($includedFiles -join ', ')
            $blockedList  = [string]::Join(', ', $blockedSet)
            $bodyLines = @(
              'Automated header sync detected updates from the Visual Studio SDK.',
              '',
              "Included files: $includedList"
            )
            if ($blockedSet.Count -gt 0) {
              $bodyLines += "Files already handled by other PRs: $blockedList"
            }
            $bodyText = $bodyLines -join "`n"

            gh pr create `
              --base $baseBranch `
              --head $branchName `
              --title $commitMsg `
              --body $bodyText
            Write-Host "Created PR for updated headers: $branchName"
          } else {
            Write-Host "COMMIT_HEADERS != 'true' - header files staged to docs/ for artifact upload."
          }

      - name: Upload staged headers (artifact)
        if: ${{ env.COMMIT_HEADERS != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: header-files
          path: docs/**

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup MSBuild (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Compile (Linux)
        if: runner.os == 'Linux'
        run: |
          gcc -Wall -Wextra -std=c89 -Ilibs 01/main.c libs/*.c -o main01
          gcc -Wall -Wextra -std=c89 -Ilibs 02/main.c libs/*.c -o main02

      - name: Compile (macOS)
        if: runner.os == 'macOS'
        run: |
          clang -Wall -Wextra -std=c89 -Ilibs 01/main.c libs/*.c -o main01
          clang -Wall -Wextra -std=c89 -Ilibs 02/main.c libs/*.c -o main02

      - name: Compile (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cl /W4 /TC /Ilibs 01\main.c libs\*.c /Fe:main01.exe
          cl /W4 /TC /Ilibs 02\main.c libs\*.c /Fe:main02.exe

  tests:
    name: Build and run Unity tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and run tests (01)
        run: |
          make -C 01 unity
          ./01/unity.out

      - name: Build and run tests (02)
        run: |
          make -C 02 unity
          ./02/unity.out

  coverage:
    name: Code coverage (gcovr)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install gcovr
        run: |
          sudo apt-get update
          sudo apt-get install -y gcovr
      - name: Build coverage binaries and run tests
        run: |
          make -C 01 unity-coverage
          ./01/unity_coverage.out
          make -C 02 unity-coverage
          ./02/unity_coverage.out
      - name: Generate HTML report
        run: |
          gcovr -r . --html --html-details -o coverage.html \
            --exclude-directories=.github \
            --exclude=libs/unity/.* \
            --exclude=tests/.* \
            --exclude=docs/.*
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html
