name: Build C Project

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  
 headergrab:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSBuild (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Detect and PR io.h changes
        if: runner.os == 'Windows'
        env:
          GH_TOKEN: ${{ github.token }}
        shell: pwsh
        run: |
          # Load dev environment
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"

          $targetFiles = @(
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\SDK\ScopeCppSDK\vc15\SDK\include\ucrt\io.h",
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\SDK\ScopeCppSDK\vc15\SDK\include\ucrt\corecrt_io.h"
          )
          
          $repoDest = "D:\a\aoc-2020\aoc-2020\docs"
          $changedFiles = @{}
          $blockedFiles = @()
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          $branchName = "io-upgrade-$timestamp"
          
          # Detect changed files and stage them
          foreach ($src in $targetFiles) {
            $fileName = Split-Path $src -Leaf
            $dest = Join-Path $repoDest $fileName
          
            if ((Get-FileHash $src).Hash -ne (Get-FileHash $dest).Hash) {
              $changedFiles[$fileName] = @{
                Src = $src
                Dest = $dest
              }
            }
          }
          
          if ($changedFiles.Count -eq 0) {
            Write-Host "No files changed. Skipping PR."
            exit 0
          }
          
          # Fetch open PRs and check for collisions
          $prList = gh pr list --state open --json number
          $pullRequests = $prList | ConvertFrom-Json
          
          foreach ($pr in $pullRequests) {
            $changedInPR = gh pr view $pr.number --json files --jq '.files[].path' 2>$null
            foreach ($file in $changedFiles.Keys) {
              if ($changedInPR -match [regex]::Escape($file)) {
                Write-Host "$file is modified in PR #$($pr.number). Skipping."
                $blockedFiles += $file
              }
            }
          }
          
          # Stage only the clean files
          $includedFiles = $changedFiles.Keys | Where-Object { $blockedFiles -notcontains $_ }
          
          if ($includedFiles.Count -eq 0) {
            Write-Host "All changed files are currently being modified in other PRs. Skipping new PR."
            exit 0
          }
          
          Write-Host "üßæ Changed Files: $($changedFiles.Keys -join ', ')"
          Write-Host "üö´ Blocked Files: $($blockedSet | ForEach-Object { $_ } -join ', ')"
          Write-Host "‚úÖ Included Files: $($includedFiles -join ', ')"

          # Setup Git and commit
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch origin
          git checkout -B $branchName origin/master
          
          foreach ($file in $includedFiles) {
            Copy-Item -Path $changedFiles[$file].Src -Destination $changedFiles[$file].Dest -Force
            git add $changedFiles[$file].Dest
          }
          
          $commitTitle = "Header sync: $($includedFiles -join ', ')"
          git commit -m $commitTitle
          git push -u origin $branchName --force
          
          # Compose PR explanation
          $bodyText = "This PR includes updated headers detected from the Visual Studio SDK.\n\n"
          $updatesJoined = $includedFiles -join '", '
          $bodyText += "‚úÖ Included updates: `"$updatesJoined`"`n"
          if ($blockedFiles.Count -gt 0) {
          $bodyText += "`n‚ùå Blocked files detected:`n"
          foreach ($file in $blockedFiles) {
          $bodyText += "$file`n"
            }
          }
          
          gh pr create `
            --base master `
            --head $branchName `
            --title $commitTitle `
            --body $bodyText

 build:
  runs-on: ${{ matrix.os }}
  strategy:
   matrix:
     os: [ubuntu-latest, macos-latest, windows-latest]

  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Compile (Linux)
      if: runner.os == 'Linux'
      run: |
        gcc -Wall -Wextra -std=c89 -Ilibs 01/main.c libs/*.c -o main01
        gcc -Wall -Wextra -std=c89 -Ilibs 02/main.c libs/*.c -o main02

    - name: Compile (macOS)
      if: runner.os == 'macOS'
      run: |
        clang -Wall -Wextra -std=c89 -Ilibs 01/main.c libs/*.c -o main01
        clang -Wall -Wextra -std=c89 -Ilibs 02/main.c libs/*.c -o main02

    - name: Compile (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
        cl /W4 /TC /Ilibs 01\main.c libs\*.c /Fe:main01.exe
        cl /W4 /TC /Ilibs 02\main.c libs\*.c /Fe:main02.exe
