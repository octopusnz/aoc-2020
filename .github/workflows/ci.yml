name: Build C Project

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  headergrab:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSBuild (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Detect and PR SDK header changes
        if: runner.os == 'Windows'
        env:
          GH_TOKEN: ${{ github.token }}
        shell: pwsh
        run: |
          # Load Visual Studio environment
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
      
          # Define source and destination files
          $targetFiles = @(
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\SDK\ScopeCppSDK\vc15\SDK\include\ucrt\io.h",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\SDK\ScopeCppSDK\vc15\SDK\include\ucrt\corecrt_io.h",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\SDK\ScopeCppSDK\vc15\SDK\include\ucrt\corecrt_share.h",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\SDK\ScopeCppSDK\vc15\SDK\include\ucrt\corecrt_wio.h"
          )
      
          $repoDest = "D:\a\aoc-2020\aoc-2020\docs"
          $changedFiles = @{}
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          $branchName = "io-sync-$timestamp"
      
          # Step 1: Detect changes
          foreach ($src in $targetFiles) {
            $fileName = Split-Path $src -Leaf
            $dest = Join-Path $repoDest $fileName
      
            if (!(Test-Path $dest) -or (Get-FileHash $src).Hash -ne (Get-FileHash $dest).Hash) {
              $changedFiles[$fileName] = @{ Src = $src; Dest = $dest }
            }
          }
      
          if ($changedFiles.Count -eq 0) {
            Write-Host "üö´ No file changes detected. Skipping PR."
            exit 0
          }
      
          # Step 2: Detect blocked files in open PRs
          $prList = gh pr list --state open --json number | ConvertFrom-Json
          $blockedSet = New-Object System.Collections.Generic.HashSet[string]
            
          foreach ($pr in $prList) {
            Write-Host "`nüîÑ Fetching file list for PR #$($pr.number)..."
            $files = gh pr view $pr.number --json files --jq '.files[].path' 2>$null
            if (-not $files -or $files.Count -eq 0) {
              Write-Host "‚ö†Ô∏è Skipping PR #$($pr.number): no file data returned."
              continue
            }
            Write-Host "`nüîç PR #$($pr.number) Files:"
            foreach ($path in $files) {
              $base = Split-Path $path -Leaf
              $normalized = $base.ToLower().Trim()
              Write-Host "üìÑ $normalized"
              $null = $blockedSet.Add($normalized)
            }
          }
            
          Write-Host "`nüìÅ Blocked Set Contents (so far):"
          $blockedSet | Sort-Object | ForEach-Object { Write-Host "üîí $_" }
          
          Write-Host "`nüîç Debugging File Inclusion Logic:"
          $changedFiles.Keys | ForEach-Object {
            $normalized = $_.ToLower().Trim()
            $status = if ($blockedSet.Contains($normalized)) { "‚ùå Blocked" } else { "‚úÖ Included" }
            Write-Host "$_ ‚Üí $status"
          }

          $includedFiles = $changedFiles.Keys | Where-Object { -not $blockedSet.Contains($_.ToLower().Trim()) }
      
          # Step 3: Diagnostics
          Write-Host "`nüßæ Changed Files: $($changedFiles.Keys -join ', ')"
          Write-Host "üö´ Blocked Files: $([string]::Join(', ', $blockedSet))"
          Write-Host "‚úÖ Included Files for PR: $($includedFiles -join ', ')`n"
      
          if ($includedFiles.Count -eq 0) {
            Write-Host "‚úÖ All changed files are already covered in open PRs. No new PR created."
            exit 0
          }
      
          # Step 4: Prepare branch and commit
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch origin
          git checkout -B $branchName origin/master
      
          foreach ($file in $includedFiles) {
            Copy-Item -Path $changedFiles[$file].Src -Destination $changedFiles[$file].Dest -Force
            git add $changedFiles[$file].Dest
          }
      
          $commitMsg = "Header sync: $($includedFiles -join ', ')"
          git commit -m $commitMsg
          git push -u origin $branchName --force
      
          # Step 5: Create PR
          $bodyText = @"
          üîß Automated header sync detected the following updates from Visual Studio SDK.

          ‚úÖ Included files: $($includedFiles -join ', ')
          "@

          if ($blockedSet.Count -gt 0) {
            $bodyText = @"
            ‚ùå Files already handled by other PRs:
             
            "$([string]::Join("`n", $blockedSet))"
          "@
          }
      
          gh pr create `
            --base master `
            --head $branchName `
            --title $commitMsg `
            --body $bodyText

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSBuild (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Compile (Linux)
        if: runner.os == 'Linux'
        run: |
          gcc -Wall -Wextra -std=c89 -Ilibs 01/main.c libs/*.c -o main01
          gcc -Wall -Wextra -std=c89 -Ilibs 02/main.c libs/*.c -o main02

      - name: Compile (macOS)
        if: runner.os == 'macOS'
        run: |
          clang -Wall -Wextra -std=c89 -Ilibs 01/main.c libs/*.c -o main01
          clang -Wall -Wextra -std=c89 -Ilibs 02/main.c libs/*.c -o main02

      - name: Compile (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          cl /W4 /TC /Ilibs 01\main.c libs\*.c /Fe:main01.exe
          cl /W4 /TC /Ilibs 02\main.c libs\*.c /Fe:main02.exe
          