name: Build C Project

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  
 headergrab:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSBuild (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Detect and PR io.h changes
        if: runner.os == 'Windows'
        env:
          GH_TOKEN: ${{ github.token }}
        shell: pwsh
        run: |
          # Load dev environment
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"

          $file1 = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\SDK\ScopeCppSDK\vc15\SDK\include\ucrt\io.h"
          $file2 = "D:\a\aoc-2020\aoc-2020\docs\io.h"

          $hash1 = Get-FileHash $file1
          $hash2 = Get-FileHash $file2

          if ($hash1.Hash -eq $hash2.Hash) {
            Write-Host "The two files are identical. No action needed."
            exit 0
          }

          Write-Host "An updated io.h file has been found. Checking open PRs..."

          $prList = gh pr list --state open --json number,title,headRefName
          $pullRequests = $prList | ConvertFrom-Json

          $TargetFile = "io.h"
          $fileWasModified = $false

          foreach ($pr in $pullRequests) {
            $prNumber = $pr.number
            $changedFiles = gh pr view $prNumber --json files --jq '.files[].path' 2>$null

            if ($changedFiles -match [regex]::Escape($TargetFile)) {
              Write-Host "PR #$prNumber modified $TargetFile"
              $fileWasModified = $true
              break
            }
          }

          if (-not $fileWasModified) {
            Write-Host "No open PR modifies $TargetFile. Creating one."

            git config user.name "github-actions"
            git config user.email "github-actions@github.com"

            git fetch origin
            git checkout -B io-upgrade origin/master

            # Copy the updated file
            Copy-Item -Path $file1 -Destination $file2 -Force

            # Check if there are changes
            if (git diff --quiet) {
              Write-Host "No actual file changes after copy. Skipping PR."
              exit 0
            }

            git add $file2
            git commit -m "io.h upgrade"
            git push -u origin io-upgrade --force

            gh pr create `
              --base master `
              --head io-upgrade `
              --title "io.h upgrade" `
              --body "Created automatically by GitHub Actions. A modified io.h version from Visual Studio SDK was detected."
          } else {
            Write-Host "A PR already modifies $TargetFile. No action taken."
          }

 build:
  runs-on: ${{ matrix.os }}
  strategy:
   matrix:
     os: [ubuntu-latest, macos-latest, windows-latest]

  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Compile (Linux)
      if: runner.os == 'Linux'
      run: |
        gcc -Wall -Wextra -std=c89 -Ilibs 01/main.c libs/*.c -o main01
        gcc -Wall -Wextra -std=c89 -Ilibs 02/main.c libs/*.c -o main02

    - name: Compile (macOS)
      if: runner.os == 'macOS'
      run: |
        clang -Wall -Wextra -std=c89 -Ilibs 01/main.c libs/*.c -o main01
        clang -Wall -Wextra -std=c89 -Ilibs 02/main.c libs/*.c -o main02

    - name: Compile (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
        cl /W4 /TC /Ilibs 01\main.c libs\*.c /Fe:main01.exe
        cl /W4 /TC /Ilibs 02\main.c libs\*.c /Fe:main02.exe
