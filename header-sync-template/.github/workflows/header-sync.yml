name: Generic file sync (template)

on:
  workflow_dispatch:
    inputs:
      sources:
        description: "Newline-separated list of source file paths or wildcards (runner paths)"
        required: false
        type: string
      dest-dir:
        description: "Destination directory in repo (relative)"
        required: false
        default: "docs"
        type: string
      preserve-dirs:
        description: "Preserve directory structure relative to base-dir (true/false)"
        required: false
        default: "false"
        type: string
      base-dir:
        description: "Base directory to strip when preserving structure"
        required: false
        type: string
      commit:
        description: "Commit and open/update PR (true/false)"
        required: false
        default: "false"
        type: string
  schedule:
    - cron: "0 6 * * 1" # Mondays at 06:00 UTC

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: windows-latest
    env:
      # Values provided via workflow_dispatch inputs; set defaults via inputs definitions
      SYNC_SOURCES: "${{ inputs.sources }}"
      DEST_DIR: "${{ inputs['dest-dir'] }}"
      PRESERVE_DIRS: "${{ inputs['preserve-dirs'] }}"
      BASE_DIR: "${{ inputs['base-dir'] }}"
      COMMIT_FILES: "${{ inputs.commit }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve sources and detect changes
        id: detect
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Set-StrictMode -Version Latest

          # Parse sources list (newline-separated). If empty, skip.
          $rawSources = $env:SYNC_SOURCES
          if ([string]::IsNullOrWhiteSpace($rawSources)) {
            Write-Host 'No sources provided. Set inputs.sources or repo var SYNC_SOURCES.'
            "changed=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            exit 0
          }

          $lines = $rawSources -split "`r?`n" | Where-Object { -not [string]::IsNullOrWhiteSpace($_) }
          $sourceFiles = New-Object System.Collections.Generic.HashSet[string]
          foreach ($pattern in $lines) {
            $hasWildcard = ($pattern -match '[*?]')
            if ($hasWildcard) {
              $items = Get-ChildItem -Path $pattern -File -Recurse -ErrorAction SilentlyContinue
              foreach ($i in $items) { [void]$sourceFiles.Add($i.FullName) }
            } else {
              if (Test-Path $pattern) { [void]$sourceFiles.Add((Resolve-Path $pattern).Path) }
            }
          }

          if ($sourceFiles.Count -eq 0) {
            Write-Host 'No files matched.'
            "changed=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            exit 0
          }

          $destRoot = Join-Path $env:GITHUB_WORKSPACE $env:DEST_DIR
          # Stage root mirrors repo root to simplify later copy
          $stageRoot = Join-Path $env:GITHUB_WORKSPACE 'file-sync-stage'
          New-Item -ItemType Directory -Path $stageRoot -Force | Out-Null

          $changedRelPaths = New-Object System.Collections.Generic.List[string]
          $changedCount = 0

          foreach ($srcPath in $sourceFiles) {
            $relDest = ''
            $preserve = ($env:PRESERVE_DIRS -eq 'true')
            $baseDir = $env:BASE_DIR
            if ($preserve -and -not [string]::IsNullOrWhiteSpace($baseDir)) {
              $baseDir = [System.IO.Path]::GetFullPath($baseDir)
              $srcFull = [System.IO.Path]::GetFullPath($srcPath)
              if ($srcFull.StartsWith($baseDir, [System.StringComparison]::OrdinalIgnoreCase)) {
                $rel = $srcFull.Substring($baseDir.Length).TrimStart('\\','/')
                $rel = ($rel -replace '\\','/')
                $relDest = (Join-Path $env:DEST_DIR $rel) -replace '\\','/'
              }
            }
            if ([string]::IsNullOrWhiteSpace($relDest)) {
              $fileName = Split-Path $srcPath -Leaf
              $relDest = (Join-Path $env:DEST_DIR $fileName) -replace '\\','/'
            }

            $repoDest = Join-Path $env:GITHUB_WORKSPACE $relDest
            $repoDir = Split-Path $repoDest -Parent
            $needsCopy = $false
            if (-not (Test-Path $repoDest)) {
              $needsCopy = $true
            } else {
              $srcHash = (Get-FileHash $srcPath -Algorithm SHA256).Hash
              $dstHash = (Get-FileHash $repoDest -Algorithm SHA256).Hash
              if ($srcHash -ne $dstHash) { $needsCopy = $true }
            }

            if ($needsCopy) {
              $stageDest = Join-Path $stageRoot $relDest
              $stageDir  = Split-Path $stageDest -Parent
              if (-not (Test-Path $stageDir)) { New-Item -ItemType Directory -Path $stageDir -Force | Out-Null }
              Copy-Item -Path $srcPath -Destination $stageDest -Force
              $changedRelPaths.Add($relDest) | Out-Null
              $changedCount++
            }
          }

          if ($changedCount -eq 0) {
            Write-Host 'No file changes detected.'
            "changed=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            exit 0
          }

          "changed=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "changed_paths=$($changedRelPaths -join "`n")" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "changed_count=$changedCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Upload synced files artifact
        if: steps.detect.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: synced-files
          path: file-sync-stage

      - name: Stage files into repo (commit mode)
        if: steps.detect.outputs.changed == 'true' && env.COMMIT_FILES == 'true'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $stage = Join-Path $env:GITHUB_WORKSPACE 'file-sync-stage'
          Copy-Item -Path (Join-Path $stage '*') -Destination $env:GITHUB_WORKSPACE -Recurse -Force

      - name: Create or update PR
        if: steps.detect.outputs.changed == 'true' && env.COMMIT_FILES == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: file-sync
          commit-message: "File sync: update ${{ steps.detect.outputs.changed_count }} file(s)"
          title: "File sync: update ${{ steps.detect.outputs.changed_count }} file(s)"
          body: |
            Automated file sync from runner paths.

            Included paths:
            ${{ steps.detect.outputs.changed_paths }}
          add-paths: |
            ${{ steps.detect.outputs.changed_paths }}
          signoff: true
          delete-branch: true
